{# GLOBAL MACROS #}
{% macro getMapName type %}{% if type|annotated:"customMap" %}{{ type.annotations.customMap }}{% else %}map{% endif %}{% endmacro %}
{% macro getFlatMapName type %}{% if type|annotated:"customFlatMap" %}{{ type.annotations.customFlatMap }}{% else %}flatMap{% endif %}{% endmacro %}
{% macro checkEscaping2 type1 type2 %}{% if type1.annotations.escapingHOF %}@escaping {% elif type2.annotations.escapingHOF %}@escaping {% endif %}{% endmacro %}
{% macro checkEscaping3 type1 type2 type3 %}{% if type1.annotations.escapingHOF %}@escaping {% elif type2.annotations.escapingHOF %}@escaping {% elif type3.annotations.escapingHOF %}@escaping {% endif %}{% endmacro %}
{% macro checkEscaping4 type1 type2 type3 type4 %}{% if type1.annotations.escapingHOF %}@escaping {% elif type2.annotations.escapingHOF %}@escaping {% elif type3.annotations.escapingHOF %}@escaping {% elif type4.annotations.escapingHOF %}@escaping {% endif %}{% endmacro %}
{% macro getComma type %}{% if type.annotations.secondaryParameter %},{% else %}{% endif %}{% endmacro %}
{# GENERIC PARAMETER #}
{% macro getDefinitionGenericParameter type level %}{% if type.annotations.secondaryParameter %}Secondary{{level}}{% else %}{% endif %}{% endmacro %}
{# INPUT TYPE CONSTRAINT #}
{% macro getFirstLevelInputConstraint type primary level %}{% if type.annotations.secondaryParameter and type.annotations.secondaryParameterOnRight|annotated:"true" %}{{ type.name }}<{{ primary }}{% call getComma type %}{% call getDefinitionGenericParameter type level %}>{% elif type.annotations.secondaryParameter %}{{ type.name }}<{% call getDefinitionGenericParameter type level %}{% call getComma type %}{{ primary }}>{% else %}{{ type.name }}<{{ primary }}>{% endif %}{% endmacro %}
{% macro getSecondLevelInputConstraint outerType outerLevel innerType innerPrimary innerLevel %}{% if outerType.annotations.secondaryParameter and outerType.annotations.secondaryParameterOnRight|annotated:"true" %}{{ outerType.name }}<{% call getFirstLevelInputConstraint innerType innerPrimary innerLevel %}{% call getComma outerType %}{% call getDefinitionGenericParameter outerType outerLevel %}>{% elif outerType.annotations.secondaryParameter %}{{ outerType.name }}<{% call getDefinitionGenericParameter outerType outerLevel %}{% call getComma outerType %}{% call getFirstLevelInputConstraint innerType innerPrimary innerLevel %}>{% else %}{{ outerType.name }}<{% call getFirstLevelInputConstraint innerType innerPrimary innerLevel %}>{% endif %}{% endmacro %}
{% macro getThirdLevelInputConstraint firstType firstLevel secondType secondLevel thirdType thirdPrimary thirdLevel  %}{% if firstType.annotations.secondaryParameter and firstType.annotations.secondaryParameterOnRight|annotated:"true" %}{{ firstType.name }}<{% call getSecondLevelInputConstraint secondType secondLevel thirdType thirdPrimary thirdLevel %}{% call getComma firstType %}{% call getDefinitionGenericParameter firstType firstLevel %}>{% elif firstType.annotations.secondaryParameter %}{{ firstType.name }}<{% call getDefinitionGenericParameter firstType firstLevel %}{% call getComma firstType %}{% call getSecondLevelInputConstraint secondType secondLevel thirdType thirdPrimary thirdLevel %}>{% else %}{{ firstType.name }}<{% call getSecondLevelInputConstraint secondType secondLevel thirdType thirdPrimary thirdLevel %}>{% endif %}{% endmacro %}
{# OUTPUT TYPE CONCRETE #}
{% macro getFirstLevelOutputConstraint type primary level %}{% if type.annotations.secondaryParameter and type.annotations.secondaryParameterOnRight|annotated:"true" %}{{ type.name }}<{{ primary }}{% call getComma type %}{% call getDefinitionGenericParameter type level %}>{% elif type.annotations.secondaryParameter %}{{ type.name }}<{% call getDefinitionGenericParameter type level %}{% call getComma type %}{{ primary }}>{% else %}{{ type.name }}<{{ primary }}>{% endif %}{% endmacro %}
{% macro getSecondLevelOutputConstraint outerType outerLevel innerType innerPrimary innerLevel %}{% if outerType.annotations.secondaryParameter and outerType.annotations.secondaryParameterOnRight|annotated:"true" %}{{ outerType.name }}<{% call getFirstLevelOutputConstraint innerType innerPrimary innerLevel %}{% call getComma outerType %}{% call getDefinitionGenericParameter outerType outerLevel %}>{% elif outerType.annotations.secondaryParameter %}{{ outerType.name }}<{% call getDefinitionGenericParameter outerType outerLevel %}{% call getComma outerType %}{% call getFirstLevelOutputConstraint innerType innerPrimary innerLevel %}>{% else %}{{ outerType.name }}<{% call getFirstLevelOutputConstraint innerType innerPrimary innerLevel %}>{% endif %}{% endmacro %}
{% macro getThirdLevelOutputConstraint outerType outerLevel middleType middleLevel innerType innerPrimary innerLevel %}{% if outerType.annotations.secondaryParameter and outerType.annotations.secondaryParameterOnRight|annotated:"true" %}{{ outerType.name }}<{% call getSecondLevelOutputConstraint middleType middleLevel innerType innerPrimary innerLevel %}{% call getComma outerType %}{% call getDefinitionGenericParameter outerType outerLevel %}>{% elif outerType.annotations.secondaryParameter %}{{ outerType.name }}<{% call getDefinitionGenericParameter outerType outerLevel %}{% call getComma outerType %}{% call getSecondLevelOutputConstraint middleType middleLevel innerType innerPrimary innerLevel %}>{% else %}{{ outerType.name }}<{% call getSecondLevelOutputConstraint middleType middleLevel innerType innerPrimary innerLevel %}>{% endif %}{% endmacro %}

{# TRANSFORMERS #}
public extension Reader {
{% for type1 in types.all|annotated:"monad" %}
	{% set genericSecondaryFlatMapTParameter %}{% call getDefinitionGenericParameter type1 "" %}{% endset %}
	{% set inputFlatMapTConstraint %}{% call getFirstLevelInputConstraint type1 "Input" "" %}{% endset %}
	{% set outputFlatMapTType %}{% call getFirstLevelOutputConstraint type1 "Output" "" %}{% endset %}
    func flatMapT <{{ genericSecondaryFlatMapTParameter }}{% call getComma type1 %}Input,Output> (_ transform: @escaping (Input) -> Reader<Environment,{{ outputFlatMapTType }}>) -> Reader<Environment,{{ outputFlatMapTType }}> where ParameterType == {{ inputFlatMapTConstraint }} {
        return Reader<Environment,{{ outputFlatMapTType }}>.init { e in
            self.run(e).{% call getFlatMapName type1 %} { transform($0).run(e) }
        }
    }

{% for type2 in types.all|annotated:"monad"|annotated:"traversable" %}
	{% set genericSecondSecondaryFlatMapTTParameter %}{% call getDefinitionGenericParameter type2 "2" %}{% call getComma type %}{% endset %}
	{% set genericFirstSecondaryFlatMapTTParameter %}{% call getDefinitionGenericParameter type1 "1" %}{% call getComma type %}{% endset %}
	{% set inputFlatMapTTConstraint %}{% call getSecondLevelInputConstraint type1 "1" type2 "Input" "2" %}{% endset %}
	{% set outputFlatMapTTConcreteType %}{% call getSecondLevelOutputConstraint type1 "1" type2 "Output" "2" %}{% endset %}
	func flatMapTT <{{ genericSecondSecondaryFlatMapTTParameter }}{% call getComma type2 %}{{ genericFirstSecondaryFlatMapTTParameter }}{% call getComma type1 %}Input,Output> (_ transform: @escaping (Input) -> Reader<Environment,{{ outputFlatMapTTConcreteType }}>) -> Reader<Environment,{{ outputFlatMapTTConcreteType }}> where ParameterType == {{ inputFlatMapTTConstraint }} {
		return Reader<Environment,{{ outputFlatMapTTConcreteType }}>.init { e in
			self.run(e).flatMapT { transform($0).run(e) }
		}
	}

{% for type3 in types.all|annotated:"monad"|annotated:"traversable" %}
	{% set genericThirdSecondaryFlatMapTTTParameter %}{% call getDefinitionGenericParameter type3 "3" %}{% call getComma type %}{% endset %}
	{% set genericSecondSecondaryFlatMapTTTParameter %}{% call getDefinitionGenericParameter type2 "2" %}{% call getComma type %}{% endset %}
	{% set genericFirstSecondaryFlatMapTTTParameter %}{% call getDefinitionGenericParameter type1 "1" %}{% call getComma type %}{% endset %}
	{% set inputFlatMapTTTConstraint %}{% call getThirdLevelInputConstraint type1 "1" type2 "2" type3 "Input" "3" %}{% endset %}
	{% set outputFlatMapTTTConcreteType %}{% call getThirdLevelOutputConstraint type1 "1" type2 "2" type3 "Output" "3" %}{% endset %}
	func flatMapTTT<{{ genericThirdSecondaryFlatMapTTTParameter }}{% call getComma type3 %}{{ genericSecondSecondaryFlatMapTTTParameter }}{% call getComma type2 %}{{ genericFirstSecondaryFlatMapTTTParameter }}{% call getComma type1 %}Input,Output> (_ transform: @escaping (Input) -> Reader<Environment,{{ outputFlatMapTTTConcreteType }}>) -> Reader<Environment,{{ outputFlatMapTTTConcreteType }}> where ParameterType == {{ inputFlatMapTTTConstraint }} {
		return Reader<Environment,{{ outputFlatMapTTTConcreteType }}>.init { e in
			self.run(e).flatMapTT { transform($0).run(e) }
		}
	}
	
{% endfor %}
{% endfor %}
{% endfor %}
}
