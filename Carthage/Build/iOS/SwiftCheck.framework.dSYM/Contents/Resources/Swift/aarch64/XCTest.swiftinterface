// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name XCTestSwiftSupport -swift-version 5 -enforce-exclusivity=checked -O -module-name XCTest
import Foundation
import Swift
@_exported import XCTest
import _Concurrency
public struct XCTIssue : Hashable {
  public static func == (lhs: XCTIssue, rhs: XCTIssue) -> Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension XCTIssue : CustomStringConvertible {
  public var description: String {
    get
  }
}
extension XCTIssue {
  public typealias IssueType = XCTIssueReference.IssueType
  public init(type: IssueType, compactDescription: String, detailedDescription: String? = nil, sourceCodeContext: XCTSourceCodeContext = .init(), associatedError: Error? = nil, attachments: [XCTAttachment] = [])
  public var type: IssueType {
    get
    set
  }
  public var compactDescription: String {
    get
    set
  }
  public var detailedDescription: String? {
    get
    set
  }
  public var sourceCodeContext: XCTSourceCodeContext {
    get
    set
  }
  public var associatedError: Error? {
    get
    set
  }
  public var attachments: [XCTAttachment] {
    get
    set
  }
  public mutating func add(_ attachment: XCTAttachment)
}
extension XCTIssue : _ObjectiveCBridgeable {
  public typealias _ObjectiveCType = XCTIssueReference
  public func _bridgeToObjectiveC() -> XCTIssueReference
  public static func _forceBridgeFromObjectiveC(_ source: XCTIssueReference, result: inout XCTIssue?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: XCTIssueReference, result: inout XCTIssue?) -> Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: XCTIssueReference?) -> XCTIssue
}
extension XCTSourceCodeLocation {
  convenience public init(filePath: StaticString = #filePath, lineNumber: UInt = #line)
}
extension XCTContext {
  public class func runActivity<Result>(named name: String, block: (XCTActivity) throws -> Result) rethrows -> Result
}
public struct XCTSkip : Error, CustomNSError {
  public var message: String? {
    get
  }
  public init(_ message: String? = nil, file: StaticString = #filePath, line: UInt = #line)
  public static let errorDomain: Swift.String
  public let errorCode: Swift.Int
  public var errorUserInfo: [String : Any] {
    get
  }
}
public func XCTSkipIf(_ expression: @autoclosure () throws -> Bool, _ message: @autoclosure () -> String? = nil, file: StaticString = #filePath, line: UInt = #line) throws
public func XCTSkipUnless(_ expression: @autoclosure () throws -> Bool, _ message: @autoclosure () -> String? = nil, file: StaticString = #filePath, line: UInt = #line) throws
extension XCTestCase {
  
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func addTeardownBlock(_ block: @escaping () async throws -> Void)
  #endif

}
public func XCTExpectFailure(_ failureReason: String? = nil, options: XCTExpectedFailure.Options = .init())
@inlinable public func XCTExpectFailure(_ failureReason: String? = nil, enabled: Bool? = nil, strict: Bool? = nil, issueMatcher: ((XCTIssue) -> Bool)? = nil) {
    let options = XCTExpectedFailure.Options(
        enabled: enabled,
        strict: strict,
        issueMatcher: issueMatcher
    )

    XCTExpectFailure(failureReason, options: options)
}
public func XCTExpectFailure<R>(_ failureReason: String? = nil, options: XCTExpectedFailure.Options = .init(), failingBlock: () throws -> R) rethrows -> R
@inlinable public func XCTExpectFailure<R>(_ failureReason: String? = nil, enabled: Bool? = nil, strict: Bool? = nil, failingBlock: () throws -> R, issueMatcher: ((XCTIssue) -> Bool)? = nil) rethrows -> R {
    let options = XCTExpectedFailure.Options(
        enabled: enabled,
        strict: strict,
        issueMatcher: issueMatcher
    )

    return try XCTExpectFailure(failureReason, options: options, failingBlock: failingBlock)
}
extension XCTExpectedFailure.Options {
  @usableFromInline
  convenience internal init(enabled: Bool? = nil, strict: Bool? = nil, issueMatcher: ((XCTIssue) -> Bool)? = nil)
}
public func XCTFail(_ message: String = "", file: StaticString = #filePath, line: UInt = #line)
public func XCTAssertNil(_ expression: @autoclosure () throws -> Any?, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line)
public func XCTAssertNotNil(_ expression: @autoclosure () throws -> Any?, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line)
public func XCTUnwrap<T>(_ expression: @autoclosure () throws -> T?, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) throws -> T
public func XCTAssert(_ expression: @autoclosure () throws -> Bool, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line)
public func XCTAssertTrue(_ expression: @autoclosure () throws -> Bool, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line)
public func XCTAssertFalse(_ expression: @autoclosure () throws -> Bool, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line)
public func XCTAssertEqual<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.Equatable
public func XCTAssertNotEqual<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.Equatable
public func XCTAssertEqual<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, accuracy: T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.FloatingPoint
public func XCTAssertEqual<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, accuracy: T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.Numeric
@available(*, deprecated, renamed: "XCTAssertEqual(_:_:accuracy:file:line:)")
public func XCTAssertEqualWithAccuracy<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, accuracy: T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.FloatingPoint
public func XCTAssertNotEqual<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, accuracy: T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.FloatingPoint
public func XCTAssertNotEqual<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, accuracy: T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.Numeric
@available(*, deprecated, renamed: "XCTAssertNotEqual(_:_:accuracy:file:line:)")
public func XCTAssertNotEqualWithAccuracy<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, _ accuracy: T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.FloatingPoint
public func XCTAssertIdentical(_ expression1: @autoclosure () throws -> AnyObject?, _ expression2: @autoclosure () throws -> AnyObject?, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line)
public func XCTAssertNotIdentical(_ expression1: @autoclosure () throws -> AnyObject?, _ expression2: @autoclosure () throws -> AnyObject?, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line)
public func XCTAssertGreaterThan<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.Comparable
public func XCTAssertGreaterThanOrEqual<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.Comparable
public func XCTAssertLessThan<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.Comparable
public func XCTAssertLessThanOrEqual<T>(_ expression1: @autoclosure () throws -> T, _ expression2: @autoclosure () throws -> T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line) where T : Swift.Comparable
public func XCTAssertThrowsError<T>(_ expression: @autoclosure () throws -> T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line, _ errorHandler: (_ error: Error) -> Void = { _ in })
public func XCTAssertNoThrow<T>(_ expression: @autoclosure () throws -> T, _ message: @autoclosure () -> String = "", file: StaticString = #filePath, line: UInt = #line)
extension XCUIGestureVelocity : ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Int)
  public typealias IntegerLiteralType = Swift.Int
}
extension XCUIGestureVelocity : ExpressibleByFloatLiteral {
  public init(floatLiteral value: CGFloat.NativeType)
  public typealias FloatLiteralType = CoreGraphics.CGFloat.NativeType
}
